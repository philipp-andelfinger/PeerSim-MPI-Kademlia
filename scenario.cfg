# ::::::::::::::::::::::::::::::::::::::::::::::::::::::
# :: Kademlia Default Configuration
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::

# ::::: TESTING ::::::

# this lets peersim print the duration of the simulation
__t

# ::::: GLOBAL ::::::
STRT_SIZE 10000		            # number of peers to start simulation with (to speed up process)
PEER_SIZE 10000 	            # number of peers that should eventually be concurrently active

K 8								# the number of peers within each bucket
TIMEOUT	1000					# Kademlia FindNode RPC timeout in [ms] = 1000ms

SIM_TIME 3600000			    # simulation time in [ms]
								# 1 hour = 3600000, 3 hours = 10800000, 6 hours = 21600000
								# 1 day = 86400000, 2 day = 172800000, 1 week = 604800000
TRAFFIC_STEP (SIM_TIME / 1000000)			# timespan, after which TrafficGenerator will start a new Lookup
OBSERVER_STEP 1000	            # timespan, after which a new line will be printed to the console

network.size STRT_SIZE			# number of nodes to create at the beginning of the simulation.

#random.seed 5546123
simulation.experiments 1
simulation.endtime (SIM_TIME + 1)


# ::::: LAYERS :::::
protocol.0link peersim.core.IdleProtocol


# ::::: LAYERS :::::

protocol.3kademlia peersim.kademlia.RemotePeer  # the class used to implement peer instances
protocol.3kademlia.K                8           # the number of peers within each bucket
protocol.3kademlia.ALPHA            2           # number of parallel queries per peer
protocol.3kademlia.TO               TIMEOUT
protocol.3kademlia.SIMPLE_BOOTSTR   false       # should lookups used for bootstrapping be simplified?
protocol.3kademlia.SIMPLE_RT_CHECK  false       # should lookups used for bucket refreshing be simplified?
protocol.3kademlia.SIMPLE_MEAS      false       # should simple lookups be included in measurements?
protocol.3kademlia.PLOT_LOOKUPS     false       # should lookups be plotted to eps files?
protocol.3kademlia.RT_CHECK_INTVL   5           # time in [min], after which the routing table checks 
                                                #   if buckets need to be refreshed
protocol.3kademlia.BUCKET_AGING     15          # if the contents of any bucket do not change for this
                                                #   time in [min], the bucket needs to be refreshed.
protocol.3kademlia.PEER_AGING       15          # time in [min] after which a peer becomes questionable,
                                                #   if no packets coming from it are received


# ::::: INITIALIZERS :::::

init.2statebuilder peersim.kademlia.StateBuilder
init.2statebuilder.protocol 3kademlia

init.2statebuilder.PEER_COUNT PEER_SIZE	# number against which the number of concurrently active peers should converge against;
										# the interarrival time will be chosen according to this number and the session length
init.2statebuilder.SESSION_SCALE 14900	# session length: scale parameter of the weibull distribution
init.2statebuilder.SESSION_SHAPE 0.68	# session length: shape parameter of the weibull distribution

# locations
init.2statebuilder.NUM_LOCATIONS 1		# number of different locations, e.g. continents

# location 1: the whole world
init.2statebuilder.0PEER_COUNT STRT_SIZE# number of peers within this location
init.2statebuilder.0NAT_RATIO 0.517		# ratio of peers located behind a NAT gateway
init.2statebuilder.0RTT_MEAN_0 200		# mean RTT when sending from loc 0 to loc 0
init.2statebuilder.0RTT_VAR_0 150		# variance of this RTT 


# ::::: CONTROLS :::::

# traffic generator
control.2traffic peersim.kademlia.TrafficGenerator
control.2traffic.protocol 3kademlia
control.2traffic.step TRAFFIC_STEP


# ::::: OBSERVER :::::
control.3observer peersim.kademlia.KademliaObserver
control.3observer.protocol 3kademlia
control.3observer.step OBSERVER_STEP


# ::::: MPI :::::

mpi.comm.maxMessageLength 10240
mpi.comm.maxRecvdPeers 100
mpi.comm.minRecvdPeers 90
mpi.comm.RandomOnlinePeersPerMessage 100

# optimization parameters
mpi.comm.idBasedPartitioning true
mpi.comm.fastLocalPings false # changes results: if true, results are closer to
                              # KJ-implementation, but if false, behavior is
                              # closer to what the transmission client does
mpi.comm.fastLocalFindNodeTimeout true
mpi.comm.gracePeriodMs 1000

